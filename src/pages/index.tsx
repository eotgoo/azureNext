import Pagination from "../Components/pagination";
import usePosts from "../hooks/UsePosts";
import Head from "next/head";
import Image from "next/image";
import Link from "next/link";
import { useRouter } from "next/router";
import { useState } from "react";
import { Inter } from "next/font/google";
const inter = Inter({ subsets: ["latin"] });

interface IAwards {
  wins: Number;
  nominations: Number;
  text: String;
}
interface IMovie {
  _id: string;
  plot: String;
  genres: [String];
  runtime: Number;
  cast: [String];
  num_mflix_comments: Number;
  poster: string;
  title: String;
  fullplot: String;
  countries: [String];
  released: Date;
  directors: [String];
  writers: [String];
  awards: IAwards;
  lastupdated: String;
  year: number;
  imdb: {
    rating: number;
    votes: Number;
    id: Number;
  };
  type: String;
  tomatoes: {
    viewer: {
      rating: Number;
      numReviews: Number;
    };
    lastUpdated: Date;
  };
}

interface IMovies {
  movies: IMovie[];
  pagination: any;
}
export default function Home({ movies, pagination }: IMovies) {
  const [movieList, setMovieList] = useState(movies);
  const router = useRouter();
  const pages = [1, 2, 3, 4, 5, 6, 7, 8];
  const [cur, setCur] = useState<number>(1);

  console.log("PAGE", pagination);

  const handlePagination = (action: string) => {
    if (action === "next") {
      router.replace(`?limit=6&page=${pagination.page + 1}`);
    } else {
      router.replace(`?limit=6&page=${pagination.page - 1}`);
    }
  };

  const SearchClick = (e: any) => {
    const change = movies.filter((movie) =>
      movie.title.toLowerCase().includes(e.target.value)
    );

    console.log(change, "===");
    setMovieList(change);
  };

  return (
    <>
      <Head>
        <title>Home Page</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="bg-black min-h-screen">
        <div className="container mx-auto">
          <h1 className="font-bold text-white underline mb-10 text-5xl text-center">
            Movies List
          </h1>
          <div>
            <input
              className="border-slate-200 placeholder-slate-400"
              placeholder="search"
              onChange={SearchClick}
            />
          </div>
          <div className="bg-black grid grid-cols-2 gap-2 p-4">
            {movies.length > 0 &&
              movieList.map((movie: IMovie) => (
                <div className="py-3 sm:max-w-xl sm:mx-auto" key={movie._id}>
                  <div className="bg-white shadow-lg border-gray-100 max-h-80	 border sm:rounded-3xl p-8 flex space-x-8">
                    <div className="h-48 overflow-visible w-1/2">
                      <Image
                        src={movie.poster || ""}
                        width={150}
                        height={200}
                        alt="moviePoster"
                        className="rounded-xl shadow-lg h-full w-full"
                      />
                    </div>
                    <div className="flex flex-col w-1/2 space-y-4">
                      <div className="flex justify-between items-start">
                        <h2 className="text-3xl font-bold">{movie.title}</h2>
                        <div className="bg-yellow-400 font-bold rounded-xl p-2">
                          {movie.imdb.rating}
                        </div>
                      </div>
                      <div>
                        <div className="text-sm text-gray-400">
                          {movie.type}
                        </div>
                        <div className="text-lg text-gray-800">
                          {movie.year}
                        </div>
                      </div>
                      <p className=" text-gray-400 max-h-40 overflow-y-hidden">
                        {movie.plot}
                      </p>
                    </div>
                  </div>
                </div>
              ))}
          </div>
          <Pagination
            pages={pages}
            cur={pagination.page}
            nextPage={() => {
              handlePagination("next");
            }}
            prevPage={() => {
              handlePagination("prev");
            }}
          />
        </div>
      </div>
    </>
  );
}

export async function getServerSideProps(ctx: any) {
  const { page, limit } = ctx.query;
  const res = await fetch(
    `http://localhost:8000/movies?limit=${limit || 6}&page=${page || 1}`
  );
  const data = await res.json();

  return {
    props: { movies: data.movies, pagination: data.pagination },
  };
}
